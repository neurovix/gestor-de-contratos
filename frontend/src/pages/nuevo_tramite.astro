---
// mismo layout y navbar
import NavbarIn from "../components/NavbarIn.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <main>
    <NavbarIn />

    <section class="px-15 py-4">
      <div class="flex flex-col gap-4">
        <input
          type="text"
          id="nombre_tramite"
          placeholder="Nombre del trámite"
          class="p-2 border border-gray-300 rounded-md mb-5"
        />

        <label
          for="pdf-upload"
          class="flex flex-col items-center justify-center border-4 border-dashed border-gray-400 rounded-xl h-48 cursor-pointer text-center hover:border-gray-600 transition-colors"
        >
          <span class="text-lg font-semibold text-gray-700 mb-2">
            Arrastra tu archivo aquí
          </span>
          <span class="text-sm text-gray-500">
            o haz clic para seleccionar un archivo PDF
          </span>
          <input
            id="pdf-upload"
            type="file"
            name="pdf"
            accept="application/pdf"
            required
          />
        </label>

        <h1 class="text-xl font-bold font-rubik mt-5 mb-2">
          Agregar verificadores
        </h1>

        <!-- INICIO AGREGAR VERIFICADORES -->
        <div id="verificadores-container">
          <div
            class="flex flex-row w-full px-15 items-center verificador-item my-3"
          >
            <div class="w-3/12 flex flex-row items-center">
              <h1
                class="bg-blue-700 rounded-full h-8 w-8 text-center font-bold flex items-center justify-center text-white mr-5 numero-verificador"
              >
                1
              </h1>
              <select
                class="w-full rounded-lg shadow-xl border-2 border-gray-700 px-4 py-2 planta-select"
              >
                <option value="1">Planta Bajio</option>
                <option value="2">Planta Prosede</option>
                <option value="3">Planta Ramos Arizpe</option>
              </select>
            </div>
            <div class="w-8/12 mx-5">
              <select
                class="w-full border-2 border-gray-700 px-4 py-2 shadow-xl rounded-lg usuario-select"
              >
                <option value="1">Fernando Alejandro Vazquez Medina</option>
                <option value="2">Alejandro Vazquez Cortes</option>
              </select>
            </div>
            <div class="w-1/12 flex justify-center">
              <button
                type="button"
                class="bg-red-600 h-8 w-8 font-bold text-white text-2xl rounded-full eliminar-verificador"
                >-</button
              >
            </div>
          </div>
        </div>
        <!-- FIN AGREGAR VERIFICADORES -->

        <div class="flex justify-center items-center my-5">
          <button
            class="text-3xl font-bold w-10 h-10 bg-green-500 hover:bg-green-700 rounded-full text-white"
            id="agregar">+</button
          >
        </div>

        <button
          class="bg-green-700 w-full py-2 rounded-lg font-bold text-white hover:bg-green-900"
          id="crear-tramite-btn"
          type="button"
        >
          CREAR
        </button>
      </div>
    </section>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("verificadores-container");
        const agregarBtn = document.getElementById("agregar");

        agregarBtn.addEventListener("click", () => {
          const items = container.querySelectorAll(".verificador-item");
          const ultimo = items[items.length - 1];
          const nuevo = ultimo.cloneNode(true);
          const nuevoNumero = items.length + 1;
          nuevo.querySelector(".numero-verificador").innerText = nuevoNumero;
          nuevo.querySelectorAll("select").forEach((select) => {
            select.selectedIndex = 0;
          });
          container.appendChild(nuevo);
        });

        container.addEventListener("click", (e) => {
          if (e.target.classList.contains("eliminar-verificador")) {
            const items = container.querySelectorAll(".verificador-item");
            if (items.length > 1) {
              e.target.closest(".verificador-item").remove();
              container
                .querySelectorAll(".numero-verificador")
                .forEach((el, index) => {
                  el.innerText = index + 1;
                });
            }
          }
        });

        // ✅ Lógica de subir archivo + enviar JSON
        document
          .getElementById("crear-tramite-btn")
          .addEventListener("click", async () => {
            const nombreTramite =
              document.getElementById("nombre_tramite").value;
            const archivoInput = document.getElementById("pdf-upload");
            const archivo = archivoInput.files[0];

            if (!archivo || !nombreTramite) {
              alert("Completa todos los campos");
              return;
            }

            // 1. Subir PDF
            const formData = new FormData();
            formData.append("pdf", archivo);
            const uploadRes = await fetch(
              "http://localhost:8080/api/upload_file",
              {
                method: "POST",
                body: formData,
                credentials: "include",
              }
            );

            const uploadData = await uploadRes.json();
            const archivo_pdf_url = uploadData.url; // ej: "/uploads/miArchivo.pdf"

            // 2. Armar lista de verificadores
            const verificadores = [];
            document
              .querySelectorAll(".verificador-item")
              .forEach((item, index) => {
                const nombre =
                  item.querySelector(".usuario-select").selectedOptions[0]
                    .textContent;
                const planta =
                  item.querySelector(".planta-select").selectedOptions[0]
                    .textContent;

                verificadores.push({
                  nombre,
                  planta,
                  orden: index + 1,
                  verificado: index === 0, // solo el primero marcado como verificado
                });
              });

            // 3. Enviar JSON
            const payload = {
              nombre_tramite: nombreTramite,
              archivo_pdf_url,
              verificadores,
            };

            console.log(payload);

            try {
              const res = await fetch(
                "http://localhost:8080/api/nuevo_tramite",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(payload),
                  credentials: "include",
                }
              );

              if (!res.ok) {
                const errorData = await res.json();
                throw new Error(
                  `Error ${res.status}: ${errorData.error || "Error desconocido"}`
                );
              }

              const result = await res.json();
              alert("Trámite creado: ID " + result.id_tramite);
            } catch (error) {
              console.error("Error al crear trámite:", error);
              alert("Error al crear trámite: " + error.message);
            }
          });
      });
    </script>
  </main>
</Layout>
